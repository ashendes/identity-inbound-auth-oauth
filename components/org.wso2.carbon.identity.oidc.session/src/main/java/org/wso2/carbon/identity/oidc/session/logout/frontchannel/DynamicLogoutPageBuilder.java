/*
 * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.wso2.carbon.identity.oidc.session.logout.frontchannel;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.wso2.carbon.identity.oauth.common.exception.InvalidOAuthClientException;
import org.wso2.carbon.identity.oauth.dao.OAuthAppDO;
import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;
import org.wso2.carbon.identity.oidc.session.OIDCSessionState;
import org.wso2.carbon.identity.oidc.session.util.OIDCSessionManagementUtil;

import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Arrays;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Dynamic HTML Content builder interface for OIDC Frontchannel logout. The HTML page is
 * generated by String manipulation of a static template.
 */
public class DynamicLogoutPageBuilder implements HTMLPageBuilder {

    private static final Log log = LogFactory.getLog(DynamicLogoutPageBuilder.class);

    private final String staticContentTemplate =
            "<html>\n" +
                    "<head>\n" +
                    "<meta charset=\"UTF-8\"> \n" +
                    "<script>\n" +
                    "var count = 0;\n" +
                    "function onIFrameLoad() {\n" +
                    "count++;\n" +
                    "if(count === " + "${frontchannelLogoutsCount}" + "){\n" +
                    "redirect();\n" +
                    "}\n" +
                    "};\n" +
                    "function redirect(){\n" +
                    "window.location = \"" + "${redirectURL}" + "\";\n" +
                    "};\n" +
                    "</script>\n" +
                    "</head>\n" +
                    "<body>\n" +
                    "${body}\n" +
                    "</body>\n" +
                    "</html>";

    private final String iframeTemplate =
            "<iframe \n" +
                    "\tsrc=\"" + "${frontchannelLogoutURL}" + "\"" +
                    "\tonload=\"onIFrameLoad()\">\n" +
                    "</iframe>\n";

    private final String redirectScriptTemplate =
            "<script>\n" +
                    "\tredirect();\n" +
                    "\t</script>\n";

    private String htmlPage;
    private StringBuilder body;

    @Override
    public void buildPage(HttpServletRequest request) {

        htmlPage = staticContentTemplate;
        body = new StringBuilder();

        Map<String, List<String>> URLs = getFrontchannelLogoutURLs(request);
        List<String> frontchannelLogoutURLs = URLs.get("frontchannelLogoutURLs");
        //String redirectURL = URLs.get("callbackURL").get(0);

        if (!frontchannelLogoutURLs.isEmpty()) {
            htmlPage = replacePlaceholder(htmlPage, "frontchannelLogoutsCount", String.valueOf(frontchannelLogoutURLs.size()));
            for (String frontchannelLogoutURL : frontchannelLogoutURLs) {
                String iframe = replacePlaceholder(iframeTemplate, "frontchannelLogoutURL", frontchannelLogoutURL);
                body.append(iframe);
            }
        } else {
            body.append(redirectScriptTemplate);
        }

        htmlPage = replacePlaceholder(htmlPage, "body", body.toString());
    }

    public void setRedirectURL(String redirectURL) {
        if (htmlPage != null) {
            htmlPage = replacePlaceholder(htmlPage, "redirectURL", redirectURL);
        }
    }

    public String getHtmlPage() {
        return htmlPage;
    }

    private Map<String, List<String>> getFrontchannelLogoutURLs(HttpServletRequest request) {
        Map<String, List<String>> URLs = new HashMap<>();
        List<String> frontchannelLogoutURLs = new ArrayList<>();
        OIDCSessionState sessionState = OIDCSessionManagementUtil.getSessionState(request);
        if (sessionState != null) {
            Set<String> sessionParticipants = OIDCSessionManagementUtil.getSessionParticipants(sessionState);
            if (!sessionParticipants.isEmpty()) {
                OAuthAppDO oAuthAppDO = null;

                try {
                    String currentClient = OIDCSessionManagementUtil.getClientId(request);
                    for (String clientID : sessionParticipants) {
                        oAuthAppDO = OIDCSessionManagementUtil.getOAuthAppDO(clientID);
                        if (StringUtils.equals(clientID, currentClient)) {
                            List<String> callbackURL = new ArrayList<>(Arrays.asList(oAuthAppDO.getCallbackUrl()));
                            URLs.put("callbackURL", callbackURL);
                            continue;
                        }
                        String frontchannelLogoutURL = oAuthAppDO.getFrontchannelLogoutUrl();
                        if (frontchannelLogoutURL != null) {
                            if (!frontchannelLogoutURL.equalsIgnoreCase(("null"))) {
                                frontchannelLogoutURLs.add(frontchannelLogoutURL);
                            }
                        }
                    }
                } catch (IdentityOAuth2Exception | InvalidOAuthClientException e) {
                    log.error("Error while getting Frontchannel Logout URLs");
                }
            }
        }
        URLs.put("frontchannelLogoutURLs", frontchannelLogoutURLs);
        return URLs;
    }

    private String replacePlaceholder(String text, String token, String replacement) {
        String regex = "\\$\\{([^}]+)\\}";
        Pattern pattern = Pattern.compile(regex);
        Matcher matcher = pattern.matcher(text);

        while (matcher.find()) {
            String placeholder = matcher.group();
            String placeholderText = matcher.group(1);

            if (token.equals(placeholderText)) {
                text = text.replaceFirst(Pattern.quote(placeholder), replacement);
                break;
            }
        }
        return text;
    }

}
